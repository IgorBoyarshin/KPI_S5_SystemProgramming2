* The following are made through the IDs table, not through rules
* If an ID_UNDEFINED is encountered => terminate with error "usage of undefined ID"
* * ID_UNDEFINED
* ID_VOID
* ID_BOOL
* ID_INT
* ID_FLOAT
* LITERAL_BOOL
* LITERAL_INT
* LITERAL_FLOAT


BLOCK ::=
    { }
    { STATEMENT }
    { STATEMENT_LIST }


TYPED_ID_LIST ::=
    TYPED_ID_LIST , TYPED_ID
    TYPED_ID , TYPED_ID


* When reducing into TYPED_ID, add the appropriate entry into the IDs table.
* When we have "bool ID (" => the type is functional.
* Store all the types in the IDs table.
TYPED_ID ::=
    bool ID
    int ID
    float ID
    void ID


* These will never be used, they just exist to make a ghost reduction pattern,
* so that the algorithm in the reduceIfCan() can convert ID into ID_*
ID_VOID ::=
    ID

ID_BOOL ::=
    ID

ID_INT ::=
    ID

ID_FLOAT ::=
    ID


DECLARATION_LIST ::=
    DECLARATION_LIST DECLARATION
    DECLARATION DECLARATION


* When trying to reduce into DECLARATION, if the reduction if from a function =>
* => add the arguments' types into the IDs table.
DECLARATION ::=
    TYPED_ID ;
    TYPED_ID ( ) BLOCK
    TYPED_ID ( TYPED_ID ) BLOCK
    TYPED_ID ( TYPED_ID_LIST ) BLOCK


STATEMENT_LIST ::=
    STATEMENT_LIST STATEMENT
    STATEMENT STATEMENT


STATEMENT ::=
    FUNCTION_CALL_VOID ;
    ID_BOOL = EXPRESSION_BOOL ;
    ID_INT = EXPRESSION_INT ;
    ID_FLOAT = EXPRESSION_FLOAT ;
    * ;
    BLOCK
    if ( EXPRESSION_BOOL ) STATEMENT
    if ( EXPRESSION_BOOL ) STATEMENT else STATEMENT


* When reducing into a FUNCTION_CALL_*, check the types using the IDs table.
FUNCTION_CALL_VOID ::=
    ID_VOID ( )
    ID_VOID ( EXPRESSION_BOOL )
    ID_VOID ( EXPRESSION_INT )
    ID_VOID ( EXPRESSION_FLOAT )
    ID_VOID ( EXPRESSION_LIST )


FUNCTION_CALL_BOOL ::=
    ID_BOOL ( )
    ID_BOOL ( EXPRESSION_BOOL )
    ID_BOOL ( EXPRESSION_INT )
    ID_BOOL ( EXPRESSION_FLOAT )
    ID_BOOL ( EXPRESSION_LIST )


FUNCTION_CALL_INT ::=
    ID_INT ( )
    ID_INT ( EXPRESSION_BOOL )
    ID_INT ( EXPRESSION_INT )
    ID_INT ( EXPRESSION_FLOAT )
    ID_INT ( EXPRESSION_LIST )


FUNCTION_CALL_FLOAT ::=
    ID_FLOAT ( )
    ID_FLOAT ( EXPRESSION_BOOL )
    ID_FLOAT ( EXPRESSION_INT )
    ID_FLOAT ( EXPRESSION_FLOAT )
    ID_FLOAT ( EXPRESSION_LIST )


EXPRESSION_LIST ::=
    EXPRESSION_LIST , EXPRESSION_BOOL
    EXPRESSION_LIST , EXPRESSION_INT
    EXPRESSION_LIST , EXPRESSION_FLOAT
    EXPRESSION_BOOL , EXPRESSION_BOOL
    EXPRESSION_BOOL , EXPRESSION_INT
    EXPRESSION_BOOL , EXPRESSION_FLOAT
    EXPRESSION_INT , EXPRESSION_BOOL
    EXPRESSION_INT , EXPRESSION_INT
    EXPRESSION_INT , EXPRESSION_FLOAT
    EXPRESSION_FLOAT , EXPRESSION_BOOL
    EXPRESSION_FLOAT , EXPRESSION_INT
    EXPRESSION_FLOAT , EXPRESSION_FLOAT


EXPRESSION_BOOL ::=
    ID_BOOL
    LITERAL_BOOL
    FUNCTION_CALL_BOOL
    ( EXPRESSION_BOOL )
    EXPRESSION_BOOL == EXPRESSION_BOOL
    EXPRESSION_INT == EXPRESSION_INT
    EXPRESSION_FLOAT == EXPRESSION_FLOAT
    EXPRESSION_BOOL != EXPRESSION_BOOL
    EXPRESSION_INT != EXPRESSION_INT
    EXPRESSION_FLOAT != EXPRESSION_FLOAT
    EXPRESSION_INT < EXPRESSION_INT
    EXPRESSION_FLOAT < EXPRESSION_FLOAT
    EXPRESSION_INT > EXPRESSION_INT
    EXPRESSION_FLOAT > EXPRESSION_FLOAT
    EXPRESSION_INT <= EXPRESSION_INT
    EXPRESSION_FLOAT <= EXPRESSION_FLOAT
    EXPRESSION_INT >= EXPRESSION_INT
    EXPRESSION_FLOAT >= EXPRESSION_FLOAT


EXPRESSION_INT ::=
    ID_INT
    LITERAL_INT
    FUNCTION_CALL_INT
    ( EXPRESSION_INT )
    EXPRESSION_INT * EXPRESSION_INT
    EXPRESSION_INT / EXPRESSION_INT
    EXPRESSION_INT + EXPRESSION_INT
    EXPRESSION_INT - EXPRESSION_INT


EXPRESSION_FLOAT ::=
    ID_FLOAT
    LITERAL_FLOAT
    FUNCTION_CALL_FLOAT
    ( EXPRESSION_FLOAT )
    EXPRESSION_FLOAT * EXPRESSION_FLOAT
    EXPRESSION_FLOAT / EXPRESSION_FLOAT
    EXPRESSION_FLOAT + EXPRESSION_FLOAT
    EXPRESSION_FLOAT - EXPRESSION_FLOAT


